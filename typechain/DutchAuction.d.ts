/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface DutchAuctionInterface extends ethers.utils.Interface {
  functions: {
    'buy()': FunctionFragment;
    'discountRate()': FunctionFragment;
    'expiresAt()': FunctionFragment;
    'getPrice()': FunctionFragment;
    'nft()': FunctionFragment;
    'nftId()': FunctionFragment;
    'seller()': FunctionFragment;
    'startAt()': FunctionFragment;
    'startingPrice()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'buy', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'discountRate',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'expiresAt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPrice', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nft', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nftId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'seller', values?: undefined): string;
  encodeFunctionData(functionFragment: 'startAt', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'startingPrice',
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: 'buy', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'discountRate',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'expiresAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nft', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nftId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'seller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startAt', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'startingPrice',
    data: BytesLike
  ): Result;

  events: {};
}

export class DutchAuction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DutchAuctionInterface;

  functions: {
    buy(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    discountRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    expiresAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    nft(overrides?: CallOverrides): Promise<[string]>;

    nftId(overrides?: CallOverrides): Promise<[BigNumber]>;

    seller(overrides?: CallOverrides): Promise<[string]>;

    startAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    startingPrice(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  buy(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  discountRate(overrides?: CallOverrides): Promise<BigNumber>;

  expiresAt(overrides?: CallOverrides): Promise<BigNumber>;

  getPrice(overrides?: CallOverrides): Promise<BigNumber>;

  nft(overrides?: CallOverrides): Promise<string>;

  nftId(overrides?: CallOverrides): Promise<BigNumber>;

  seller(overrides?: CallOverrides): Promise<string>;

  startAt(overrides?: CallOverrides): Promise<BigNumber>;

  startingPrice(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    buy(overrides?: CallOverrides): Promise<void>;

    discountRate(overrides?: CallOverrides): Promise<BigNumber>;

    expiresAt(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(overrides?: CallOverrides): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<string>;

    nftId(overrides?: CallOverrides): Promise<BigNumber>;

    seller(overrides?: CallOverrides): Promise<string>;

    startAt(overrides?: CallOverrides): Promise<BigNumber>;

    startingPrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    buy(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    discountRate(overrides?: CallOverrides): Promise<BigNumber>;

    expiresAt(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(overrides?: CallOverrides): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<BigNumber>;

    nftId(overrides?: CallOverrides): Promise<BigNumber>;

    seller(overrides?: CallOverrides): Promise<BigNumber>;

    startAt(overrides?: CallOverrides): Promise<BigNumber>;

    startingPrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    buy(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    discountRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expiresAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startingPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
