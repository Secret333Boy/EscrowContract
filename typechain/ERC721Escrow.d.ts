/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ERC721EscrowInterface extends ethers.utils.Interface {
  functions: {
    "inventory()": FunctionFragment;
    "rollbackERC721(address)": FunctionFragment;
    "sendERC721(address,uint256)": FunctionFragment;
    "withdrawERC721()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "inventory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rollbackERC721",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendERC721",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "inventory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rollbackERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendERC721", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721",
    data: BytesLike
  ): Result;

  events: {
    "LogERC721RolledBack(address,address,uint256)": EventFragment;
    "LogERC721Send(address,address,uint256)": EventFragment;
    "LogERC721WithDraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogERC721RolledBack"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogERC721Send"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogERC721WithDraw"): EventFragment;
}

export type LogERC721RolledBackEvent = TypedEvent<
  [string, string, BigNumber] & {
    sender: string;
    to: string;
    tokenID: BigNumber;
  }
>;

export type LogERC721SendEvent = TypedEvent<
  [string, string, BigNumber] & { sender: string; to: string; item: BigNumber }
>;

export type LogERC721WithDrawEvent = TypedEvent<
  [string, BigNumber] & { to: string; item: BigNumber }
>;

export class ERC721Escrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ERC721EscrowInterface;

  functions: {
    inventory(overrides?: CallOverrides): Promise<[BigNumber]>;

    rollbackERC721(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendERC721(
      _to: string,
      _tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC721(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  inventory(overrides?: CallOverrides): Promise<BigNumber>;

  rollbackERC721(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendERC721(
    _to: string,
    _tokenID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC721(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    inventory(overrides?: CallOverrides): Promise<BigNumber>;

    rollbackERC721(to: string, overrides?: CallOverrides): Promise<void>;

    sendERC721(
      _to: string,
      _tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC721(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "LogERC721RolledBack(address,address,uint256)"(
      sender?: string | null,
      to?: string | null,
      tokenID?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; to: string; tokenID: BigNumber }
    >;

    LogERC721RolledBack(
      sender?: string | null,
      to?: string | null,
      tokenID?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; to: string; tokenID: BigNumber }
    >;

    "LogERC721Send(address,address,uint256)"(
      sender?: string | null,
      to?: string | null,
      item?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; to: string; item: BigNumber }
    >;

    LogERC721Send(
      sender?: string | null,
      to?: string | null,
      item?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; to: string; item: BigNumber }
    >;

    "LogERC721WithDraw(address,uint256)"(
      to?: string | null,
      item?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; item: BigNumber }>;

    LogERC721WithDraw(
      to?: string | null,
      item?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; item: BigNumber }>;
  };

  estimateGas: {
    inventory(overrides?: CallOverrides): Promise<BigNumber>;

    rollbackERC721(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendERC721(
      _to: string,
      _tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC721(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    inventory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rollbackERC721(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendERC721(
      _to: string,
      _tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC721(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
