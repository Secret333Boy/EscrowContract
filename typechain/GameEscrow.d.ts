/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface GameEscrowInterface extends ethers.utils.Interface {
  functions: {
    'getERC20Balance()': FunctionFragment;
    'getEtherBalance()': FunctionFragment;
    'inventory()': FunctionFragment;
    'rollbackERC20(address)': FunctionFragment;
    'rollbackERC721(address)': FunctionFragment;
    'rollbackEther(address)': FunctionFragment;
    'sendERC20(address,uint256)': FunctionFragment;
    'sendERC721(address,uint256)': FunctionFragment;
    'sendEther(address)': FunctionFragment;
    'withdrawERC20()': FunctionFragment;
    'withdrawERC721()': FunctionFragment;
    'withdrawEther()': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'getERC20Balance',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getEtherBalance',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'inventory', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'rollbackERC20',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'rollbackERC721',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'rollbackEther',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'sendERC20',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'sendERC721',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'sendEther', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'withdrawERC20',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawERC721',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawEther',
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: 'getERC20Balance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getEtherBalance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'inventory', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'rollbackERC20',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rollbackERC721',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rollbackEther',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'sendERC20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sendERC721', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sendEther', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawERC20',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawERC721',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawEther',
    data: BytesLike
  ): Result;

  events: {
    'Error(string)': EventFragment;
    'LogERC20RolledBack(address,address,uint256)': EventFragment;
    'LogERC20Send(address,address,uint256)': EventFragment;
    'LogERC20WithDraw(address,uint256)': EventFragment;
    'LogERC721RolledBack(address,address,uint256)': EventFragment;
    'LogERC721Send(address,address,uint256)': EventFragment;
    'LogERC721WithDraw(address,uint256)': EventFragment;
    'LogRolledBack(address,address,uint256)': EventFragment;
    'LogSend(address,address,uint256)': EventFragment;
    'LogWithDraw(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Error'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogERC20RolledBack'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogERC20Send'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogERC20WithDraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogERC721RolledBack'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogERC721Send'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogERC721WithDraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogRolledBack'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogSend'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogWithDraw'): EventFragment;
}

export type ErrorEvent = TypedEvent<[string] & { arg0: string }>;

export type LogERC20RolledBackEvent = TypedEvent<
  [string, string, BigNumber] & { sender: string; to: string; value: BigNumber }
>;

export type LogERC20SendEvent = TypedEvent<
  [string, string, BigNumber] & { sender: string; to: string; value: BigNumber }
>;

export type LogERC20WithDrawEvent = TypedEvent<
  [string, BigNumber] & { to: string; value: BigNumber }
>;

export type LogERC721RolledBackEvent = TypedEvent<
  [string, string, BigNumber] & {
    sender: string;
    to: string;
    tokenID: BigNumber;
  }
>;

export type LogERC721SendEvent = TypedEvent<
  [string, string, BigNumber] & { sender: string; to: string; item: BigNumber }
>;

export type LogERC721WithDrawEvent = TypedEvent<
  [string, BigNumber] & { to: string; item: BigNumber }
>;

export type LogRolledBackEvent = TypedEvent<
  [string, string, BigNumber] & { sender: string; to: string; value: BigNumber }
>;

export type LogSendEvent = TypedEvent<
  [string, string, BigNumber] & { sender: string; to: string; value: BigNumber }
>;

export type LogWithDrawEvent = TypedEvent<
  [string, BigNumber] & { to: string; value: BigNumber }
>;

export class GameEscrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GameEscrowInterface;

  functions: {
    getERC20Balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEtherBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    inventory(overrides?: CallOverrides): Promise<[BigNumber]>;

    rollbackERC20(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rollbackERC721(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rollbackEther(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendERC20(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendERC721(
      _to: string,
      _tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendEther(
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC721(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawEther(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getERC20Balance(overrides?: CallOverrides): Promise<BigNumber>;

  getEtherBalance(overrides?: CallOverrides): Promise<BigNumber>;

  inventory(overrides?: CallOverrides): Promise<BigNumber>;

  rollbackERC20(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rollbackERC721(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rollbackEther(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendERC20(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendERC721(
    _to: string,
    _tokenID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendEther(
    _to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC721(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawEther(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getERC20Balance(overrides?: CallOverrides): Promise<BigNumber>;

    getEtherBalance(overrides?: CallOverrides): Promise<BigNumber>;

    inventory(overrides?: CallOverrides): Promise<BigNumber>;

    rollbackERC20(to: string, overrides?: CallOverrides): Promise<void>;

    rollbackERC721(to: string, overrides?: CallOverrides): Promise<void>;

    rollbackEther(to: string, overrides?: CallOverrides): Promise<void>;

    sendERC20(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendERC721(
      _to: string,
      _tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendEther(_to: string, overrides?: CallOverrides): Promise<void>;

    withdrawERC20(overrides?: CallOverrides): Promise<void>;

    withdrawERC721(overrides?: CallOverrides): Promise<void>;

    withdrawEther(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Error(string)'(
      undefined?: null
    ): TypedEventFilter<[string], { arg0: string }>;

    Error(undefined?: null): TypedEventFilter<[string], { arg0: string }>;

    'LogERC20RolledBack(address,address,uint256)'(
      sender?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; to: string; value: BigNumber }
    >;

    LogERC20RolledBack(
      sender?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; to: string; value: BigNumber }
    >;

    'LogERC20Send(address,address,uint256)'(
      sender?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; to: string; value: BigNumber }
    >;

    LogERC20Send(
      sender?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; to: string; value: BigNumber }
    >;

    'LogERC20WithDraw(address,uint256)'(
      to?: string | null,
      value?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; value: BigNumber }>;

    LogERC20WithDraw(
      to?: string | null,
      value?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; value: BigNumber }>;

    'LogERC721RolledBack(address,address,uint256)'(
      sender?: string | null,
      to?: string | null,
      tokenID?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; to: string; tokenID: BigNumber }
    >;

    LogERC721RolledBack(
      sender?: string | null,
      to?: string | null,
      tokenID?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; to: string; tokenID: BigNumber }
    >;

    'LogERC721Send(address,address,uint256)'(
      sender?: string | null,
      to?: string | null,
      item?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; to: string; item: BigNumber }
    >;

    LogERC721Send(
      sender?: string | null,
      to?: string | null,
      item?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; to: string; item: BigNumber }
    >;

    'LogERC721WithDraw(address,uint256)'(
      to?: string | null,
      item?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; item: BigNumber }>;

    LogERC721WithDraw(
      to?: string | null,
      item?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; item: BigNumber }>;

    'LogRolledBack(address,address,uint256)'(
      sender?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; to: string; value: BigNumber }
    >;

    LogRolledBack(
      sender?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; to: string; value: BigNumber }
    >;

    'LogSend(address,address,uint256)'(
      sender?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; to: string; value: BigNumber }
    >;

    LogSend(
      sender?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; to: string; value: BigNumber }
    >;

    'LogWithDraw(address,uint256)'(
      to?: string | null,
      value?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; value: BigNumber }>;

    LogWithDraw(
      to?: string | null,
      value?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; value: BigNumber }>;
  };

  estimateGas: {
    getERC20Balance(overrides?: CallOverrides): Promise<BigNumber>;

    getEtherBalance(overrides?: CallOverrides): Promise<BigNumber>;

    inventory(overrides?: CallOverrides): Promise<BigNumber>;

    rollbackERC20(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rollbackERC721(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rollbackEther(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendERC20(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendERC721(
      _to: string,
      _tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendEther(
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC20(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC721(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawEther(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getERC20Balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEtherBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inventory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rollbackERC20(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rollbackERC721(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rollbackEther(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendERC20(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendERC721(
      _to: string,
      _tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendEther(
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC721(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEther(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
